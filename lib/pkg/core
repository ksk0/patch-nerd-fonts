#!/usr/bin/zsh

###############################################################################
# packaging functions
#
UPGRADED=0
INSTALLED_PACKAGES=()
FAILED_PACKAGES=()
AUTO_REMOVE_PKGS=""
PACKAGE_LIST=$SCRIPT_DIR/lib/pkg/list

typeset -gA __INSTALLED_PKGS
typeset -gA __FAILED_PKGS

#############################################
# main packiging proxy function
#
zpackage(){
	local cmd="${1}_package"; shift
	local action=$1; shift
	local pkg

	for pkg in $@; do
		$cmd $action $pkg
	done
}

#############################################
# main packiging proxy function
#
load_package_list(){
	typeset -gA REQUIRED_PACKAGES

	REQUIRED_PACKAGES=("${(@f)$(
		cat $PACKAGE_LIST |

		sed -E \
			-e 's/#.*//' \
			-e 's/^\s+//' \
			-e 's/\s+$//' \
			-e 's/\s+/ /' \
			-e 's/\[\s+/\[/' \
			-e 's/\s+\]/\]/' |

		grep -v '^$'|

		awk '
			function print_group(){
				if (packages != ""){
					print group
					print(substr(packages,2))
				}
			}

			/^\[[^]]+\]$/{
				if (group != ""){
					print_group()
				}

				sub(/\[/,"",$0)
				sub(/\]/,"",$0)

				group = $0
				packages=""
				next
			}

			{packages = packages " " $0}

			END{
				print_group()
			}
		'
	)}")

	local -U system_pkgs=(${=REQUIRED_PACKAGES[system]} ${=REQUIRED_PACKAGES[$OS]})

	REQUIRED_PACKAGES[system]=$system_pkgs

	unset "REQUIRED_PACKAGES[$OS]"
}

#############################################
# package version
#
is_newer(){
	local have=$1
	local need=$2

	have_val=$((${have%.*} * 10000 + ${have#*.}))
	need_val=$((${need%.*} * 10000 + ${need#*.}))

	[[ $need_val -gt $have_val ]]  && return 1

	return 0
}

normalize_version(){
	echo $1 | awk '
		/^[0-9]+\.[0-9]+.*/{
			split($1,parts,"\\.")
			# printf("%-25s %-20s A:%d.%d\n",$1, $2, parts[1], parts[2])

			printf("%d.%d\n", parts[1], parts[2])
			next
		}

		/^[0-9]+[.:][0-9]+\.[0-9]+.*/{
			split($1,parts,"[.:]")
			# printf("%-25s %-20s B:%d.%d\n",$1, $2, parts[1] * 100 + parts[2], parts[3])

			printf("%d.%d\n", parts[1] * 100 + parts[2], parts[3])
			next
		}

		/^[0-9]+[.:][0-9]+.*/{
			split($1,parts,"[.:]")
			# printf("%-25s %-20s C:%d.%d\n",$1, $2, parts[1], parts[2])

			printf("%d.%d\n", parts[1], parts[2])
			next
		}

		/^[0-9]+-[0-9]+.*/{
			split($1,parts,"-")
			# printf("%-25s %-20s D:%d.%d\n",$1, $2, parts[1], parts[2])

			printf("%d.%d\n", parts[1], parts[2])
			next
		}

		/^[0-9]+$/{
			# printf("%-25s %-20s E:%d.%d\n",$1, $2, $2, 0)
			printf("%d.00\n", $1)
			next
		}

		{
			print "0.00"
			next
		}

	'
}


###############################################################################
# count success/failure
#
count_action(){
	local action=$1; shift

	if [[ $action = success ]]; then
		count_success $1 $2 $3
		return 0

	elif [[ $action = fail ]]; then
		count_fails $1 $2 $3
		return 1

	elif [[ $action -eq 0 ]]; then
		count_success $1 $2 "${3}ed"
		return 0

	else
		count_fails $1 $2 "failed to ${3}"
		return 1
	fi
}

count_success(){
	local pkg="$1:$2"

	[[ ${+__INSTALLED_PKGS[$pkg]} -eq 1 ]] && return

	INSTALLED_PACKAGES+=("$1;$2;${3//ee/e}")

	__INSTALLED_PKGS[$pkg]=1
}

count_fails(){
	local pkg="$1:$2"

	[[ ${+__FAILED_PKGS[$pkg]} -eq 1 ]] && return

	FAILED_PACKAGES+=("$1;$2;$3")

	__FAILED_PKGS[$pkg]=1
}
