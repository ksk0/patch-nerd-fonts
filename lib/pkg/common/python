#!/usr/bin/zsh

__FONT_PATCHER_SHARE=$SCRIPT_DIR/.local
__PYTHON_HOME=$__FONT_PATCHER_SHARE/python

#############################################
# python packages functions
#
python_package(){
	local cmd=$1; shift
	local pkg=$1; shift
	local func=python_package_${pkg//-/_}_$cmd

	###########################################
	# some packages have separate install
	# function.
	#
	if typeset -f $func >/dev/null; then
		$func $action
		return
	fi

	case $cmd in
		check)     python_package_check     $pkg "$@";;
		action)    python_package_action    $pkg "$@";;
		provides)  python_package_provides  $pkg "$@";;
		version)   python_package_version   $pkg "$@";;
		doinstall) python_package_doinstall $pkg "$@"; return $?;;
		install)   python_package_install   $pkg "$@"; return $?;;
		uninstall) python_package_uninstall $pkg "$@"; return $?;;
	esac
}

python_package_install(){
	local pkg=$1
	local todo

	if ! zpackage system check python; then
		count_action fail python $pkg "python3 not installed"
		return 1
	fi

	python_package action $pkg todo
	# echo "TODO:$todo $pkg"

	if [[ $todo = keep ]] then
		count_action success python $pkg kept
		return 0
	elif [[ $todo = missing ]] then
		count_action fail python $pkg missing
		return 1
	elif [[ ${todo%%:*} = old ]] then
		local parts=${(s.:.)todo}
		count_action fail python $pkg "$parts[2] $parts[3]"
		return 1
	fi

	pkg=${todo#*:}

	alert_msg "Installing [python]" "${pkg}"

	echo
	python_package doinstall $pkg

	count_action $? python $pkg install

	return $?
}

python_package_doinstall(){
	local package=$1
	local width=$(tput cols)
	local result

	if [[ $width -gt 80 ]] then
		stty cols 80
	fi

	pip3 install $package
	result=$?

	if [[ $width -gt 80 ]] then
		stty cols $width
	fi

	return $result
}

python_package_check(){
	local pkg=$1


	local inst_version=$(
		pip3 show $pkg 2>/dev/null |
		grep '^Version:' |
		awk '{print $2}'
	)

	[[ -n $inst_version ]] && return 0

	return 1
}

python_package_action(){
	local __package=${1%/*}
	local __version=${${${(M)1:#*/*}##*/}:-0.0}
	local __store=$2
	local __action

	python_package_action_exec __action $1

	eval "$__store=$__action"
}

python_package_action_exec(){
	local action
	local store=$1; shift
	local package=${1%/*}
	local version=${${${(M)1:#*/*}##*/}:-0.0}

	alert_msg "Checking [pyhton]" "${package}"
	echo

	local inst_version=$(python_package version $package installed)
	local repo_version=$(python_package version $package repo)
	local inst_version_n=$(normalize_version $inst_version)
	local repo_version_n=$(normalize_version $repo_version)
	local need_version=${(j:.:)${(@s:.:)version}[1,2]}

	echo "Installed: $inst_version"
	echo "Repo:      $repo_version"
	echo "Short:     $repo_version_n"
	echo "Need:      $need_version"

	if [[ -z inst_version ]]; then
		if [[ -z $repo_version ]]; then
			action=missing
		elif ! is_newer $repo_version_n $need_version; then
			action=old:$repo_version_n:$need_version
		else
			action=install:$package
		fi

	else
		if [[ -z $repo_version ]]; then
			action=keep
		elif [[ $inst_version = $repo_version ]]; then
			action=keep
		elif ! is_newer $repo_version_n $inst_version_n; then
			action=keep
		else
			action=install:$package
		fi

	fi

	# if [[ -n $inst_version ]] && [[ -z $repo_version ]]; then
	# 	action=keep
	# elif [[ -z $repo_version ]]; then
	# 	action=missing
	# elif [[ $inst_version = $repo_version ]]; then
	# 	action=keep
	# elif is_newer $repo_version_n $need_version; then
	# 	action=keep
	# elif ! is_newer $repo_version_n $need_version; then
	# 	action=old:$repo_version_n:$need_version
	# else
	# 	action=install:$package
	# fi

	eval "$store=$action"

	clear_screen 9
}

python_package_version(){
	local pkg=$1
	local vtype=$2

	local inst_version=$(
		pip3 show $pkg 2>/dev/null |
		grep '^Version:' |
		awk '{print $2}'
	)

	if [[ $vtype = 'installed' ]]; then
		echo $inst_version
		return
	fi

	local repo_version

	if [[ -n $inst_version ]]; then
		repo_version=$(pip3 list -lo | grep -i "^${pkg} " | awk '{print $3}')

		[[ -n $repo_version ]] && echo $repo_version && return
	fi

	local cwd=$(pwd)
	local tmp_dir=$(mktemp -d)

	cd $tmp_dir
	pip3 download $pkg >/dev/null 2>&1

	local package=$(ls -1)

	[[ -z $package ]] && return

	repo_version=$(
		unzip -c $package '*/METADATA' |
		grep '^Version: ' |
		awk '{print $2}'
	)

	cd $cwd
	rm -rf $tmp_dir

	echo $repo_version
}

install_python_venv(){
	local venv_path=$__PYTHON_HOME
	local venv_cfg=$__PYTHON_HOME/pyvenv.cfg
	local venv_lib=$__PYTHON_HOME/lib/python3
	local activate=$__PYTHON_HOME/bin/activate

	[[ -f $activate ]] && return 0

	alert_msg "Installing" "python virtual env"

	python3 -m venv \
	--system-site-packages $venv_path \
	>/dev/null 2>&1 || return 1

	local version=$(
		grep -E '^version\s*=\s*' $venv_cfg |
		sed -E -e 's/^version\s*=\s*//' |
		awk -F. '{print $1 "." $2}'
	)

	[[ -L $venv_lib ]] || ln -s python${version} $venv_lib
	[[ -z $VIRTUAL_ENV ]] && source $venv_path/bin/activate

	clear_screen 4

	return 0
}

setup_python_venv(){
	local venv_path=$__PYTHON_HOME
	local activate=$__PYTHON_HOME/bin/activate

	alert_msg "Setting up" "python virtual env"

	[[ -f $activate ]] ||  return 1

	[[ -z $VIRTUAL_ENV ]] && source $activate

	clear_screen 4

	return 0
}
